name: Build and Deploy AWS Batch

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: eu-central-1
  PROJECT_NAME: appalti-batch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get ECR repository URI
      id: ecr-uri
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_URI="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-jobs"
        echo "ecr_uri=${ECR_URI}" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        docker build --no-cache -t ${{ env.PROJECT_NAME }}-jobs -f docker/Dockerfile .

    - name: Tag Docker image
      run: |
        docker tag ${{ env.PROJECT_NAME }}-jobs:latest ${{ steps.ecr-uri.outputs.ecr_uri }}:latest
        docker tag ${{ env.PROJECT_NAME }}-jobs:latest ${{ steps.ecr-uri.outputs.ecr_uri }}:${{ github.sha }}

    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.ecr-uri.outputs.ecr_uri }}:latest
        docker push ${{ steps.ecr-uri.outputs.ecr_uri }}:${{ github.sha }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Deploy AWS Infrastructure
      run: |
        cd deploy/
        
        # Create terraform.tfvars with account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        account_id = "${ACCOUNT_ID}"
        project_name = "${{ env.PROJECT_NAME }}"
        environment = "production"
        EOF
        
        # Initialize Terraform
        terraform init
        
        # Import existing resources if they exist (ignore errors if not found)
        echo "Importing existing resources..."
        terraform import aws_ecr_repository.batch_jobs appalti-batch-jobs || true
        terraform import aws_iam_role.batch_service_role appalti-batch-batch-service-role || true
        terraform import aws_iam_role.ecs_task_execution_role appalti-batch-ecs-task-execution-role || true
        terraform import aws_iam_role.batch_job_role appalti-batch-batch-job-role || true
        terraform import aws_cloudwatch_log_group.batch_logs /aws/batch/appalti-batch || true
        terraform import aws_secretsmanager_secret.batch_secrets appalti-batch-secrets || true
        terraform import aws_batch_compute_environment.main appalti-batch-compute-env || true
        terraform import aws_batch_job_queue.main appalti-batch-job-queue || true
        terraform import aws_batch_job_definition.metric_computation appalti-batch-metric-computation || true
        terraform import aws_batch_job_definition.metadata_extraction appalti-batch-metadata-extraction || true
        
        # Deploy infrastructure
        terraform plan
        terraform apply -auto-approve

    - name: Update AWS Secrets Manager
      run: |
        # Update the secrets in AWS Secrets Manager with values from GitHub secrets
        aws secretsmanager update-secret \
          --secret-id "appalti-batch-secrets" \
          --secret-string '{
            "MONGO_URI": "${{ secrets.MONGO_URI }}",
            "SMTP_HOST": "smtp.gmail.com",
            "SMTP_PORT": "587", 
            "SMTP_USER": "${{ secrets.SMTP_USER }}",
            "SMTP_PASSWORD": "${{ secrets.SMTP_PASSWORD }}",
            "EMAIL_FROM": "${{ secrets.EMAIL_FROM }}",
            "GOOGLE_API_KEY": "${{ secrets.GOOGLE_API_KEY }}"
          }'

    # Job definitions are already configured in AWS Batch
    # They will automatically use the latest image from ECR

    - name: Deployment summary
      run: |
        echo "🎉 Deployment completed!"
        echo "📦 Image: ${{ steps.ecr-uri.outputs.ecr_uri }}:${{ github.sha }}"
        echo "🔍 Check logs: aws logs tail /aws/batch/${{ env.PROJECT_NAME }} --follow"